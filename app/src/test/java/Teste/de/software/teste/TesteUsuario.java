/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package Teste.de.software.teste;

import Teste.de.software.dominio.Usuario;
import org.apache.http.HttpStatus;
import org.junit.Test;

import static io.restassured.RestAssured.given;
import static org.hamcrest.CoreMatchers.*;

public class TesteUsuario extends TesteBase {

    //Escrever o código dessa forma com endpoint fica mais fácil de um usuário novo bater o olho e entender
    //Até mesmo para o próprio usuário entender o que o endpoint faz.
    private static final String LISTA_USUARIOS_ENDPOINT = "/users";
    private static final String CRIAR_USUARIO_ENDPOINT = "/users";

    @Test
    public void testeMostraPaginaEspecifica() {
        given().
                param("page", "2").
        //Escrita do restAssured para testar a api do site https://reqres.in
        when().
                get(LISTA_USUARIOS_ENDPOINT).
        then().
                //is() é do hamcrest, eu não coloquei a dependência dele no build.gradle
                //Portanto, ele puxou do JUNIT ou do restAssured
                statusCode(HttpStatus.SC_OK).
                body("page", is(2)).
                body("data", is(notNullValue()));
    }

    @Test
    public void testeCriaUsuarioComSucesso() {
        //A API que eu estou trabalhando tem um problema.
        //OS campos de registro da API são apenas nome e job, ele deveria rejeitar o e-mail.
        //O correto seria a API rejeitar, vou trabalhar na classe de dominio como se houvesse a rejeição.
        //Há como usar o 'JsonIgonoreProperties' e ignorar uma propriedade específica ou todas desconhecidas.
        Usuario usuario = new Usuario("Diego", "Jogador", "email@reqres.com");

        given().//.log().all().
                //Tenho que informar que estou passando um JSON
        //Esse contentType não é mais necessário, criei na BaseTeste uma classe que já 'seta' todos os types
        //para JSON, deixarei apenas para conhecimento.
                //contentType(ContentType.JSON).
                body(usuario).
        when().
            post(CRIAR_USUARIO_ENDPOINT).
        then().
            statusCode(HttpStatus.SC_CREATED).
            body("name", is("Diego"));
    }

    @Test
    public void testListaUsuario() {
        given().
                pathParam("user", "2").
        when().
                get("/users/{user}").
        then().
                statusCode(HttpStatus.SC_OK).
                body("data.email", containsString("@reqres.in"));
    }
}